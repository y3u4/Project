package ucdf2307ict_oop;

import java.io.*;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class LecturerConsultationSlots extends javax.swing.JFrame {
    private String[] columnName = {"Day", "Time", "Lecturer"};
    private DefaultTableModel model = new DefaultTableModel();
    private int row = -1;
    private File lecSlotsFile = new File("lecturerSlots.txt");
    private String Username;

    public LecturerConsultationSlots(String Username) throws IOException {
        this.Username = Username;
        model.setColumnIdentifiers(columnName);
        initComponents();
        
        // Update the date combo box with next 7 days
        updateDateComboBox();
        
        // Check if file exists, if not, create it
        if (!lecSlotsFile.exists()) {
            try {
                lecSlotsFile.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating file: " + e.getMessage());
            }
        }
        
        loadSlotsFromFile();
    }
    
    private void updateDateComboBox() {
        dateComboBox.removeAllItems();
        dateComboBox.addItem("- Please select -");

        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE (dd/MM/yyyy)");

        int weekdaysAdded = 0;
        while (weekdaysAdded < 5) {
            // Check if the current day is a weekday
            if (currentDate.getDayOfWeek() != DayOfWeek.SATURDAY && currentDate.getDayOfWeek() != DayOfWeek.SUNDAY) {
                // Check if the day is today and if the last time slot has passed
                if (currentDate.isEqual(LocalDate.now())) {
                    LocalTime currentTime = LocalTime.now();
                    LocalTime lastSlotEndTime = LocalTime.of(17, 0); // 5:00 PM

                    if (currentTime.isAfter(lastSlotEndTime)) {
                        currentDate = currentDate.plusDays(1);
                        continue; // Skip adding today's date if the last slot has passed
                    }
                }
                dateComboBox.addItem(currentDate.format(formatter));
                weekdaysAdded++;
            }
            currentDate = currentDate.plusDays(1);
        }
    }
    
    // check if a time slot has passed
    private boolean isSlotExpired(String dayWithDate, String timeSlot) {
        try {
            // Parse the date from format "EEEE (dd/MM/yyyy)"
            String dateStr = dayWithDate.substring(dayWithDate.indexOf("(") + 1, dayWithDate.indexOf(")"));
            LocalDate slotDate = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));

            // Parse the time with correct format
            String startTimeStr = timeSlot.split(" - ")[0].trim();
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a", Locale.US);
            LocalTime slotTime = LocalTime.parse(startTimeStr, timeFormatter);

            // Get current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();

            // If the date is in the past, slot is expired
            if (slotDate.isBefore(currentDate)) {
                return true;
            }

            // If it's today, check if the time has passed
            if (slotDate.isEqual(currentDate) && slotTime.isBefore(currentTime)) {
                return true;
            }

            return false;
        } catch (Exception e) {
            // Log the error with more details
            System.out.println("Error parsing date/time for slot: " + dayWithDate + " " + timeSlot);
            System.out.println("Error details: " + e.getMessage());
            return false; // Allow the slot if there's an error
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lecturerLabel = new javax.swing.JLabel();
        dateComboBox = new javax.swing.JComboBox<>();
        timeComboBox = new javax.swing.JComboBox<>();
        addSlotButton = new javax.swing.JButton();
        removeSlotButton = new javax.swing.JButton();
        editSlotButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        BackToMenuButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lecturerSlotsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        dateLabel.setFont(new java.awt.Font("Modern No. 20", 0, 18)); // NOI18N
        dateLabel.setText("Day :");

        jLabel2.setFont(new java.awt.Font("Modern No. 20", 0, 18)); // NOI18N
        jLabel2.setText("Time :");

        lecturerLabel.setFont(new java.awt.Font("Modern No. 20", 0, 18)); // NOI18N
        lecturerLabel.setText("Lecturer :");

        dateComboBox.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        dateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Please select -", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));
        dateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxActionPerformed(evt);
            }
        });

        timeComboBox.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Please select -", "09:00 AM - 10:30 AM", "11:00 AM - 12:30 PM", "01:30 PM - 03:00 PM", "03:30 PM - 05:00 PM" }));
        timeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeComboBoxActionPerformed(evt);
            }
        });

        addSlotButton.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        addSlotButton.setText("Add a slot");
        addSlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSlotButtonActionPerformed(evt);
            }
        });

        removeSlotButton.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        removeSlotButton.setText("Remove a slot");
        removeSlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSlotButtonActionPerformed(evt);
            }
        });

        editSlotButton.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        editSlotButton.setText("Change a slot");
        editSlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSlotButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Modern No. 20", 1, 36)); // NOI18N
        jLabel3.setText("Lecturer Slots");

        BackToMenuButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        BackToMenuButton.setText("< Back");
        BackToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        jLabel4.setText(Username);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(dateLabel)
                                    .addComponent(lecturerLabel))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateComboBox, 0, 225, Short.MAX_VALUE)
                                    .addComponent(timeComboBox, 0, 225, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(addSlotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeSlotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editSlotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(BackToMenuButton)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(BackToMenuButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerLabel)
                    .addComponent(jLabel4))
                .addGap(56, 56, 56)
                .addComponent(addSlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(removeSlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editSlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        lecturerSlotsTable.setModel(model);
        lecturerSlotsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lecturerSlotsTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lecturerSlotsTable);

        jLabel1.setFont(new java.awt.Font("Modern No. 20", 1, 36)); // NOI18N
        jLabel1.setText("Slots Added");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(290, 290, 290))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeComboBoxActionPerformed

    private void dateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboBoxActionPerformed

    private void addSlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSlotButtonActionPerformed
        String dayWithDate = dateComboBox.getSelectedItem().toString();
        String time = timeComboBox.getSelectedItem().toString();
        String lecturer = Username;

        if (!"- Please select -".equals(dayWithDate) && 
                !"- Please select -".equals(time) && 
                !"- Please select -".equals(lecturer)) {
            
            // Check if the time slot has passed
            if (isSlotExpired(dayWithDate, time)) {
                JOptionPane.showMessageDialog(this, 
                    "This time slot has already passed. Please select a future time slot.",
                    "Invalid Time Slot",
                    JOptionPane.WARNING_MESSAGE);
                timeComboBox.setSelectedIndex(0);
                return;
            }
            
            try {
                // Check for duplicates in file
                boolean isDuplicate = false;
                BufferedReader br = new BufferedReader(new FileReader(lecSlotsFile));
                String line;
                while ((line = br.readLine()) != null) {
                    String[] slots = line.split(",");
                    if (slots.length == 3 && 
                        slots[0].equals(dayWithDate) && 
                        slots[1].equals(time) && 
                        slots[2].equals(lecturer)) {
                        isDuplicate = true;
                        break;
                    }
                }
                br.close();

                if (isDuplicate) {
                    JOptionPane.showMessageDialog(this, "This consultation slot has already been added. Please choose another slot!");
                    // Clear the combo box selections 
                    dateComboBox.setSelectedIndex(0); 
                    timeComboBox.setSelectedIndex(0);
                    return;
                }

                // Add to the table if it's not expired
                model.addRow(new Object[]{dayWithDate, time, lecturer});

                // Add the data to file
                addSlotToFile(dayWithDate, time, lecturer);

                // Clear the combo box selections 
                dateComboBox.setSelectedIndex(0); 
                timeComboBox.setSelectedIndex(0);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occurred while adding data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select all options!"); 
        }
    }//GEN-LAST:event_addSlotButtonActionPerformed
 
    private void addSlotToFile(String dayWithDate, String time, String lecturer) throws IOException{
//        this.Username = Username;
        FileWriter fw = new FileWriter(lecSlotsFile, true);
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(dayWithDate + "," + time + "," + lecturer);
        bw.newLine();
        bw.close();
    }
    
    private void removeSlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSlotButtonActionPerformed
        int row = lecturerSlotsTable.getSelectedRow();
        if (row != -1) {
            try {
                // Get the slot data from the table
                String day = model.getValueAt(row, 0).toString();
                String time = model.getValueAt(row, 1).toString();
                String lecturer = model.getValueAt(row, 2).toString();
                
                // Remove the row from the table
                model.removeRow(row);
                
                // Remove the slot from the file
                updateSlotFromFile(day, time, lecturer);
                
                // Clear the combo box selections 
                dateComboBox.setSelectedIndex(0); 
                timeComboBox.setSelectedIndex(0);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occurred while removing data" + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove!");
        }
    }//GEN-LAST:event_removeSlotButtonActionPerformed

    private void updateSlotFromFile(String day, String time, String lecturer) throws IOException{
        // Read all lines from the file
        FileReader fr = new FileReader(lecSlotsFile);
        BufferedReader br = new BufferedReader(fr);
        StringBuilder sb = new StringBuilder();
        String line;

        while ((line = br.readLine()) != null) {
            // Skip the line to be removed
            if (!line.equals(day + "," + time + "," + lecturer)) {
                sb.append(line).append("\n");
            }
        }
        br.close();

        // Write the updated content back to the file
        FileWriter fw = new FileWriter(lecSlotsFile);
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(sb.toString());
        bw.close();
    }
    
    private void editSlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSlotButtonActionPerformed
        int row = lecturerSlotsTable.getSelectedRow();
        if (row != -1) {
            String dayWithDate = dateComboBox.getSelectedItem().toString();
            String time = timeComboBox.getSelectedItem().toString();
            String lecturer = Username;
            
            //Check any invalid selection
            if ("- Please select -".equals(dayWithDate)||"- Please select -".equals(time)||"- Please select -".equals(lecturer)){
                JOptionPane.showMessageDialog(this, "Please select all the options!");
                return;
            }
            
            try {
                // Check for duplicates in file
                boolean isDuplicate = false;
                BufferedReader br = new BufferedReader(new FileReader(lecSlotsFile));
                String line;
                while ((line = br.readLine()) != null) {
                    String[] slots = line.split(",");
                    if (slots.length == 3 && 
                        slots[0].equals(dayWithDate) && 
                        slots[1].equals(time) && 
                        slots[2].equals(lecturer)) {
                        isDuplicate = true;
                        break;
                    }
                }
                br.close();

                if (isDuplicate) {
                    JOptionPane.showMessageDialog(this, "This consultation slot has already been added. Please choose another slot!");
                    // Clear the combo box selections 
                    dateComboBox.setSelectedIndex(0); 
                    timeComboBox.setSelectedIndex(0);
                    return;
                }

                // Get the old slot data from the table
                String oldDay = model.getValueAt(row, 0).toString();
                String oldTime = model.getValueAt(row, 1).toString();
                String oldLecturer = model.getValueAt(row, 2).toString();
                
                // Update the table
                model.setValueAt(dayWithDate, row, 0);
                model.setValueAt(time, row, 1);
                model.setValueAt(lecturer, row, 2);
                
                // Remove the old slot from the file and save the new slot
                updateSlotFromFile(oldDay, oldTime, oldLecturer);
                addSlotToFile(dayWithDate, time, lecturer);
                
                // Clear the combo box selections 
                dateComboBox.setSelectedIndex(0);
                timeComboBox.setSelectedIndex(0);

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occurred while editing the data" + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to edit!");
        }
    }//GEN-LAST:event_editSlotButtonActionPerformed

    private void loadSlotsFromFile() throws IOException{
        FileReader fr = new FileReader(lecSlotsFile);
        BufferedReader br = new BufferedReader(fr);
        String line;
        while ((line = br.readLine()) != null) {
            String[] lecSlots = line.split(",");
            if (lecSlots.length == 3) {
                // Only add to table if slot hasn't expired
                if (!isSlotExpired(lecSlots[0], lecSlots[1])) {
                    model.addRow(new Object[]{lecSlots[0], lecSlots[1], lecSlots[2]});
                }
            }
        }
        br.close(); 
    }
    
    private void lecturerSlotsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lecturerSlotsTableMouseReleased
        int selectedRow = lecturerSlotsTable.getSelectedRow();
        if (selectedRow != -1) {
            String dayWithDate = model.getValueAt(selectedRow, 0).toString();
            dateComboBox.setSelectedItem(dayWithDate);
            timeComboBox.setSelectedItem(model.getValueAt(selectedRow, 1).toString());
        }
    }//GEN-LAST:event_lecturerSlotsTableMouseReleased

    private void BackToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuButtonActionPerformed
        LecturerDashboard ld = new LecturerDashboard(Username);
        ld.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackToMenuButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerConsultationSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerConsultationSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerConsultationSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerConsultationSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                try {
//                    new LecturerConsultationSlots().setVisible(true);
//                } catch (IOException e) {
//                    System.out.print("An error occurred. Please try again." );
//                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMenuButton;
    private javax.swing.JButton addSlotButton;
    private javax.swing.JComboBox<String> dateComboBox;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton editSlotButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lecturerLabel;
    private javax.swing.JTable lecturerSlotsTable;
    private javax.swing.JButton removeSlotButton;
    private javax.swing.JComboBox<String> timeComboBox;
    // End of variables declaration//GEN-END:variables
}
