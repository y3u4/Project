package ucdf2307ict_oop;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import javax.swing.JOptionPane;

public class StudentForgotPassword extends javax.swing.JFrame {
    private String studentID;

    public StudentForgotPassword(String studentID) {
        this.studentID = studentID;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        forgotPasswordLabel = new javax.swing.JLabel();
        studentIDLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        studentIDTextField = new javax.swing.JTextField();
        newPasswordTextField = new javax.swing.JPasswordField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordTextField = new javax.swing.JPasswordField();
        resetPasswordButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        forgotPasswordLabel.setFont(new java.awt.Font("Modern No. 20", 1, 36)); // NOI18N
        forgotPasswordLabel.setText("Forgot Password");

        studentIDLabel.setFont(new java.awt.Font("Modern No. 20", 0, 24)); // NOI18N
        studentIDLabel.setText("Student ID :");

        newPasswordLabel.setFont(new java.awt.Font("Modern No. 20", 0, 24)); // NOI18N
        newPasswordLabel.setText("New Password :");

        confirmPasswordLabel.setFont(new java.awt.Font("Modern No. 20", 0, 24)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password:");

        resetPasswordButton.setFont(new java.awt.Font("Modern No. 20", 0, 12)); // NOI18N
        resetPasswordButton.setText("Reset Password");
        resetPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPasswordButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(153, 153, 153));
        backButton.setFont(new java.awt.Font("Modern No. 20", 0, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("< Back");
        backButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(322, Short.MAX_VALUE)
                .addComponent(forgotPasswordLabel)
                .addContainerGap(322, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(studentIDLabel)
                    .addComponent(newPasswordLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentIDTextField)
                    .addComponent(newPasswordTextField)
                    .addComponent(confirmPasswordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(388, 388, 388)
                .addComponent(resetPasswordButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(backButton)
                .addGap(43, 43, 43)
                .addComponent(forgotPasswordLabel)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentIDLabel)
                    .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newPasswordLabel)
                    .addComponent(newPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(confirmPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addComponent(resetPasswordButton)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPasswordButtonActionPerformed
        String studentID = studentIDTextField.getText();
        String newPassword = new String(newPasswordTextField.getPassword());
        String confirmPassword = new String(confirmPasswordTextField.getPassword());
        
        // Validate empty fields
        if (studentID.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "All fields are required.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate student ID format
        Student student = new Student(studentID, "", "");
        if (!student.validateId()) {
            JOptionPane.showMessageDialog(this, 
                "Invalid Student ID format.\nMust start with 'TP' followed by 6 numbers.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            studentIDTextField.setText("");
            return;
        }
        
        // Find student in database
        Student temp_student = Student.findStudent(studentID);
        if (temp_student == null) {
            JOptionPane.showMessageDialog(this, 
                "Student ID not found.\nPlease check your ID and try again.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            studentIDTextField.setText("");
            newPasswordTextField.setText("");
            confirmPasswordTextField.setText("");
            return;
        }
        
        // Validate password match
        if (!newPassword.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, 
                "New password and confirm password do not match.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            newPasswordTextField.setText("");
            confirmPasswordTextField.setText("");
            return;
        }
        
        // Validate new password requirements
        if (newPassword.length() < 8 || !validateNewPassword(newPassword)) {
            JOptionPane.showMessageDialog(this, 
                "Password must:\n" +
                "- Be at least 8 characters long\n" +
                "- Contain at least one uppercase letter\n" +
                "- Contain at least one lowercase letter\n" +
                "- Contain at least one special character",
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            newPasswordTextField.setText("");
            confirmPasswordTextField.setText("");
            return;
        }
        
        // Check if new password is same as old password
        if (student.authenticate(newPassword)) {
            JOptionPane.showMessageDialog(this, 
                "New password cannot be the same as the current password.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            newPasswordTextField.setText("");
            confirmPasswordTextField.setText("");
            return;
        }
        
        // Update password in file
        if (updatePasswordInFile(studentID, newPassword)) {
            JOptionPane.showMessageDialog(this, 
                "Password reset successfully!\nPlease log in with your new password.", 
                "Success", 
                JOptionPane.INFORMATION_MESSAGE);

            // Return to login page
            StudentLogin sl = new StudentLogin();
            sl.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, 
                "An error occurred while resetting the password.\nPlease try again.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_resetPasswordButtonActionPerformed

    // validate new password
    private boolean validateNewPassword(String password) {
        return password.matches(".*[A-Z].*") && // At least one uppercase
               password.matches(".*[a-z].*") && // At least one lowercase
               password.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?].*"); // At least one special char
    }
    
    // update password in file
    private boolean updatePasswordInFile(String studentId, String newPassword) {
        try {
            List<String> lines = Files.readAllLines(Paths.get("studentInfo.txt"));

            for (int i = 0; i < lines.size(); i++) {
                String[] parts = lines.get(i).split(",");
                if (parts[0].trim().equals(studentId)) {
                    // Preserve the original format: id,username,password
                    lines.set(i, String.format("%s,%s,%s", 
                        parts[0].trim(), 
                        parts[1].trim(), 
                        newPassword));

                    Files.write(Paths.get("studentInfo.txt"), lines);
                    return true;
                }
            }
        } catch (IOException e) {
            return false;
        }
        return false;
    }
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        StudentLogin sl = new StudentLogin();
        sl.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new StudentForgotPassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JPasswordField confirmPasswordTextField;
    private javax.swing.JLabel forgotPasswordLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField newPasswordTextField;
    private javax.swing.JButton resetPasswordButton;
    private javax.swing.JLabel studentIDLabel;
    private javax.swing.JTextField studentIDTextField;
    // End of variables declaration//GEN-END:variables
}
