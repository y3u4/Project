
package ucdf2307ict_oop;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class LecturerReschedule extends javax.swing.JFrame {
    private String Username;
    private String[] columnName = {"Student ID","Day", "Time", "Lecturer","New Day", "New Time", "New Lecturer", "Status"};//the column name that you want to display on Table
    private DefaultTableModel model = new DefaultTableModel();
    private int row = -1;
    private File lecturerRescheduleFile = new File("lecturerReschedule.txt");
    private File lecSlotsFile = new File("lecturerSlots.txt");
    private File studentRescheduleFile = new File("studentReschedule.txt");
    private File studentAppointmentFile = new File("studentAppointment.txt");
    private File lecturerAppointmentFile = new File("lecturerAppointment.txt");
    
    public LecturerReschedule(String Username) {
        this.Username = Username;
        model.setColumnIdentifiers(columnName);
        initComponents();
        getRescheduleRequest();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BackButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ApproveButton2 = new javax.swing.JButton();
        RejectButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 494));

        jLabel1.setFont(new java.awt.Font("Modern No. 20", 1, 24)); // NOI18N
        jLabel1.setText("Reschedule Request");

        BackButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        BackButton1.setText("< Back");
        BackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(model);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resizeTableColumns();
        jScrollPane1.setViewportView(jTable1);

        ApproveButton2.setFont(new java.awt.Font("Modern No. 20", 1, 18)); // NOI18N
        ApproveButton2.setText("Approve");
        ApproveButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveButton2ActionPerformed(evt);
            }
        });

        RejectButton3.setFont(new java.awt.Font("Modern No. 20", 1, 18)); // NOI18N
        RejectButton3.setText("Reject");
        RejectButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RejectButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(BackButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(120, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ApproveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(RejectButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(299, 299, 299))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(BackButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RejectButton3)
                    .addComponent(ApproveButton2))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getRescheduleRequest() {
        if (!lecturerRescheduleFile.exists()){
            try {
                lecturerRescheduleFile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(LecturerReschedule.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try (BufferedReader br = new BufferedReader(new FileReader(studentRescheduleFile))) {
            String line;
            
            while ((line = br.readLine()) != null) {
                // Assuming the data is comma-separated
                String[] rowData = line.split(",");
                if (rowData.length == columnName.length) { // Exclude "Status" column
                    // Extract the "Lecturer (Old)" and "New Lecturer" from the row
                    String lecturerOld = rowData[3];  // 4th column
                    String lecturerNew = rowData[6];  // 7th column
                    if (lecturerOld.equalsIgnoreCase(Username) || lecturerNew.equalsIgnoreCase(Username)) {
                        // Prepare the row data
                        Object[] row = new Object[columnName.length];
                        // Populate the row with data from rowData
                        System.arraycopy(rowData, 0, row, 0, rowData.length);
                        model.addRow(row); 
                    }   
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading studentReschedule.txt: " + e.getMessage(), 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void processRescheduleRequest(String status) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No row selected!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Retrieve row data
            String studentId = model.getValueAt(selectedRow, 0).toString();
            String oldDay = model.getValueAt(selectedRow, 1).toString();
            String oldTime = model.getValueAt(selectedRow, 2).toString();
            String oldLecturer = model.getValueAt(selectedRow, 3).toString();
            String newDay = model.getValueAt(selectedRow, 4).toString();
            String newTime = model.getValueAt(selectedRow, 5).toString();
            String newLecturer = model.getValueAt(selectedRow, 6).toString();

            // Update status in JTable
            model.setValueAt(status, selectedRow, columnName.length - 1);

            // Update lecturerReschedule.txt
            updateLecturerRescheduleFile(lecturerRescheduleFile, studentId, oldDay, oldTime, oldLecturer, newDay, newTime, newLecturer, status);

            // Update studentReschedule.txt
            updateStudentRescheduleFile(studentRescheduleFile, studentId, oldDay, oldTime, oldLecturer, newDay, newTime, newLecturer, status);

            if ("Approved".equals(status)) {
                // Update studentAppointment.txt
                updateStudentAppointment(studentId, oldDay, oldTime, oldLecturer, newDay, newTime, newLecturer);

                // Update lecturerSlots.txt
                updateLecturerSlots(oldDay, oldTime, oldLecturer, newDay, newTime);
            }

            JOptionPane.showMessageDialog(this, "Request " + status.toLowerCase() + " successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace(); // This will print the full stack trace
            JOptionPane.showMessageDialog(this, "Error processing request: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void updateLecturerRescheduleFile(File lecturerRescheduleFile, String studentId, String oldDay, String oldTime, String oldLecturer, 
                        String newDay, String newTime, String newLecturer, String status) throws IOException {
        List<String> lines = Files.readAllLines(lecturerRescheduleFile.toPath());
        List<String> updatedLines = new ArrayList<>();

        boolean found = false;
        for (String line : lines) {
            String[] parts = line.split(",");
            if (parts[0].equalsIgnoreCase(studentId) && 
                parts[1].equalsIgnoreCase(oldDay) && 
                parts[2].equalsIgnoreCase(oldTime) && 
                parts[3].equalsIgnoreCase(oldLecturer)) {
                // Replace the existing line with updated information
                updatedLines.add(studentId + "," + oldDay + "," + oldTime + "," + oldLecturer + "," +
                                 newDay + "," + newTime + "," + newLecturer + "," + status);
                found = true;
            } else {
                updatedLines.add(line);
            }
        }

        // If no existing line was found, add a new entry
        if (!found) {
            updatedLines.add(studentId + "," + oldDay + "," + oldTime + "," + oldLecturer + "," +
                             newDay + "," + newTime + "," + newLecturer + "," + status);
        }

        // Rewrite the entire file with updated lines
        Files.write(lecturerRescheduleFile.toPath(), updatedLines, StandardCharsets.UTF_8);
    }
    
    private void updateStudentRescheduleFile(File studentRescheduleFile, String studentId, 
            String oldDay, String oldTime, String oldLecturer,
            String newDay, String newTime, String newLecturer, String status) throws IOException {
        this.studentRescheduleFile = studentRescheduleFile;
        // Read all lines from file
        List<String> lines = Files.readAllLines(studentRescheduleFile.toPath());
        List<String> updatedLines = new ArrayList<>();

        for (String line : lines) {
            String[] parts = line.split(",");
            if (parts[0].equalsIgnoreCase(studentId)
                    && parts[1].equalsIgnoreCase(oldDay)
                    && parts[2].equalsIgnoreCase(oldTime)
                    && parts[3].equalsIgnoreCase(oldLecturer)) {
                // Update the status of the matching row
                updatedLines.add(studentId + "," + oldDay + "," + oldTime + "," 
                        + oldLecturer + "," +newDay + "," + newTime + "," 
                        + newLecturer + "," + status);
            } else {
                updatedLines.add(line);
            }
        }

        // Rewrite the updated lines back to the file
        Files.write(studentRescheduleFile.toPath(), updatedLines, StandardCharsets.UTF_8);
    }
    
    private void updateStudentAppointment(String studentId, String oldDay, String oldTime, String oldLecturer, String newDay, String newTime, String newLecturer) {
        try {
            // Check if the file exists
            if (!studentAppointmentFile.exists()) {
                return;
            }

            // Read all lines from the file
            List<String> lines = Files.readAllLines(studentAppointmentFile.toPath());
            List<String> updatedLines = new ArrayList<>();
            boolean matchFound = false;

            // Iterate through each line and process
            for (String line : lines) {
                String[] parts = line.split(",");

                if (parts.length != 4) {
                    updatedLines.add(line); // Keep malformed lines unchanged
                    continue;
                }

                if (parts[0].trim().equalsIgnoreCase(studentId) &&
                    parts[1].trim().equalsIgnoreCase(oldDay) &&
                    parts[2].trim().equalsIgnoreCase(oldTime) &&
                    parts[3].trim().equalsIgnoreCase(oldLecturer)) {

                    // Replace with the new appointment
                    updatedLines.add(studentId + "," + newDay + "," + newTime + "," + newLecturer);
                    matchFound = true;
                } else {
                    // Keep other lines unchanged
                    updatedLines.add(line);
                }
            }
            // Write the updated lines back to the file
            Files.write(studentAppointmentFile.toPath(), updatedLines, StandardCharsets.UTF_8);
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error updating appointments file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateLecturerSlots(String oldDay, String oldTime,String oldLecturer, String newDay, String newTime) throws IOException {
        // Read all lines from lecturerSlots.txt
        List<String> lines = Files.readAllLines(lecSlotsFile.toPath());
        List<String> updatedLines = new ArrayList<>();

        for (String line : lines) {
            String[] parts = line.split(",");
            if (parts[1].equalsIgnoreCase(newDay) && parts[2].equalsIgnoreCase(newTime)) {
                // Skip the new slot (it has been scheduled)
                continue;
            }
            updatedLines.add(line);
        }

        // Add the old slot back to availability
        updatedLines.add(oldDay +","+ oldTime +","+ oldLecturer);

        // Rewrite the updated lines back to the file
        Files.write(lecSlotsFile.toPath(), updatedLines, StandardCharsets.UTF_8);
    }
    
    private void ApproveButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveButton2ActionPerformed
        processRescheduleRequest("Approved");
    }//GEN-LAST:event_ApproveButton2ActionPerformed

    private void BackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButton1ActionPerformed
        LecturerDashboard ld = new LecturerDashboard(Username);
        ld.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButton1ActionPerformed

    private void RejectButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RejectButton3ActionPerformed
        processRescheduleRequest("Rejected");
    }//GEN-LAST:event_RejectButton3ActionPerformed

    private void resizeTableColumns() {
        // Access the column model of the table
        javax.swing.table.TableColumnModel columnModel = jTable1.getColumnModel();
        // Set preferred widths for each column
        columnModel.getColumn(0).setPreferredWidth(80); // Student ID
        columnModel.getColumn(1).setPreferredWidth(140); // Day
        columnModel.getColumn(2).setPreferredWidth(140); // Time
        columnModel.getColumn(3).setPreferredWidth(145); // Lecturer
        columnModel.getColumn(4).setPreferredWidth(140); // New Day
        columnModel.getColumn(5).setPreferredWidth(140); // New Time
        columnModel.getColumn(6).setPreferredWidth(145); // New Lecturer
        columnModel.getColumn(7).setPreferredWidth(80); // Status
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new LecturerReschedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApproveButton2;
    private javax.swing.JButton BackButton1;
    private javax.swing.JButton RejectButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
